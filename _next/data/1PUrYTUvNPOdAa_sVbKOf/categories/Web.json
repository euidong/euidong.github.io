{"pageProps":{"posts":[{"content":"## Gatsby\n\nLink : <https://www.gatsbyjs.com>\n\n> Gatsby is a React-based open-source framework for creating websites and apps.\n> It's great whether you're building a portfolio site or blog,\n> or a high-traffic e-commerce store or company homepage.\n\ngatsby introduce themselves that sentense. they focus on that big, high performance, and complicated feature view.\nThat is gatsby's advantage. they can make high performance feature more faster.\n\n### Why?\n\n#### First. Bigger and Faster\n\nIt uses React And GraphQL feature.\nSo, it can make better performance than other static web site platform. ex) jk ...\n\n##### Second. Support many feature\n\n- It can do many thing in framework.\n\n<https://www.gatsbyjs.com/docs/conceptual/>\n\n##### Third. Showcase\n\n- gatsby Showcase\n\n<https://themejam.gatsbyjs.org/showcase>\n\n### This Blog's feature\n\n- novela Theme\n\n<https://github.com/narative/gatsby-theme-novela>\n\n### SetUp\n\n=> github : <https://github.com/euidong/euidong.github.io>\n\n#### 1. Install\n\n```shell\nmkdir blog\nyarn add react react-dom gatsby @narative/gatsby-theme-novela\nyarn install\n```\n\n##### 2. set script\n\n`blog/package.json`\n\n```json\n{\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"https://www.opensource.org/licenses/mit-license.php\"\n    }\n  ],\n  \"dependencies\": {\n    \"@narative/gatsby-theme-novela\": \"^0.18.4\",\n    \"gatsby\": \"^2.28.0\",\n    \"gh-pages\": \"^3.1.0\",\n    \"react\": \"^17.0.1\",\n    \"react-dom\": \"^17.0.1\"\n  },\n  \"scripts\": {\n    \"build\": \"gatsby build --prefix-paths\",\n    \"deploy\": \"gatsby build --prefix-paths && gh-pages -d public\",\n    \"dev\": \"gatsby develop\"\n  },\n  \"homepage\": \"https://euidong.github.io\"\n}\n```\n\n##### 3. post & author setting\n\nThis theme require at least one post and one author.\n\n`blog/content/authors/authors.yml`\n\n```yml\n- name: Euidong Jung\n  authorsPage: true\n  bio: |\n    Dev - Lang : Javascript Typescript <br />\n    Dev - Front : ReactJS ReactNative <br />\n    Dev - Back : NodeJS Apollo Express <br />\n    Dev - ENV : CloudNative Docker Kubernates AWS\n  avatar: ./avatars/euidong-avatar.jpeg\n  featured: true\n  social:\n    - url: https://github.com/euidong\n```\n\nand add image to\n`blog/content/authors/avatars/euidong-avatar.jpeg`\n\n`blog/content/posts/2021-01-03-gatsby/index.mdx`\n\n```mdx\n---\ntitle: Gatsby Blog\nauthor: Euidong Jung\ndate: 2021-01-03\nhero: ./images/gatsby.png\nexcerpt: Gatsby Flatform\n---\n\n# hellow world\n\n### good world\n\n##### happy world\n```\n\n##### 4. Icon\n\n`blog/src/@narative/gatsby-theme-novela/components/Logo`\n\n```javascript\nimport React from \"react\";\nimport { Link } from \"gatsby\";\nimport LogoBlack from \"../../../../image/icon/logo-black.png\";\nimport LogoWhite from \"../../../../image/icon/logo-white.png\";\n\n/**\n * Paste in your SVG logo and return it from this component.\n * Make sure you have a height set for your logo.\n * It is recommended to keep the height within 25-35px.\n */\nexport default function Logo({ fill }) {\n  return (\n    <Link\n      to=\"/\"\n      style={{\n        fontSize: \"40px\",\n        fontWeight: 700,\n        fontFamily: \"Merriweather',Georgia,Serif\",\n      }}\n    >\n      <img\n        src={fill === \"#fff\" ? LogoWhite : LogoBlack}\n        alt=\"logo\"\n        style={{ height: \"60px\" }}\n      />\n    </Link>\n  );\n}\n```\n\n##### 5. testing\n\n```shell\nyarn dev  # testing\n```\n\n##### 6. deployment\n\nSelect static web site deploy platform.(ex. gh-page / aws s3 / heroku ...)\n\n```shell\nyarn deploy # deploying to gh-page\n```\n\nIf you want deploy instantly when push to branch. You can use github action. (It is simple CI/CD)\n\nSee bellow example\n\nblog/.github/workflows/main.yml\n\n```yml\nname: github pages\n\non:\n  push:\n    branches:\n      - dev\n\njobs:\n  deploy:\n    runs-on: ubuntu-18.04\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Setup Node\n        uses: actions/setup-node@v2.1.2\n        with:\n          node-version: \"12.x\"\n\n      - name: Cache dependencies\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Install yarn\n        run: npm install -g yarn\n\n      - name: Install node_modules\n        run: yarn install\n\n      - name: Build\n        run: yarn build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n```\n\nIt is status Badge.\n![github pages](https://github.com/euidong/euidong.github.io/workflows/github%20pages/badge.svg?branch=dev&event=push)\n","slug":"gatsby","date":"2020-04-10 12:00","title":"Gatsby","category":"Web","tags":["Gatsby","MDX","Blog"],"thumbnailSrc":"https://euidong.github.io/images/gatsby.png"},{"content":"열심히 만든 Blog를 검색 엔진들에 노출하기 위한 일지를 기록한다.\n\n먼저 내가 원하는 것은 구글, 네이버, 다음에 나의 블로그의 태그, 카테고리, 타이틀로 검색어가 노출이 되는 것이다.\n이를 위해서 무엇을 해야 하는지를 정리한다.\n\n## robots.txt\n\nrobots.txt는 CRA로 React Project를 생성했을 때도, 자동으로 생성해줄만큼 가장 기본적인 요소이다. 이는 가종 검색 엔진의 Posting을 Crawling하는 장치들에게 해당 Posting에 대한 접근 권한을 명시해놓는 곳이다. 따라서, 작성 시에는 간략하게 다음과 같이 표현하는 것이 일반적이다.\n\n```text\nUser-agent: *\nDisallow:\n```\n\n이는 어떠한 검색 엔진 봇의 접근을 허락하며, 모든 하위 uri에 대한 접근을 허락한다는 것이다.\n더 알고 싶다면 공식 문서를 참고하자. <https://www.robotstxt.org/robotstxt.html>\n\n## sitemap.xml\n\n웹 페이지 내의 모든 페이지 목록을 나열한 파일이다. 이는 site에 해당하는 모든 url을 등록하고, 어느곳에 어느 컨텐츠가 존재하는지를 알려주는 mapping table이라고 볼 수 있다.\n이를 명시해두어야만 후에 bot들이 작업을 할 때, 조회를 하여 사용할 수 있다. 이를 생성하기 위한 Script는 해당 Project가 포함하고 있다.\n[euidong.github.io's dev branch](https://github.com/euidong/euidong.github.io/blob/dev/generater.js)\n\n---\n\n## Reference\n\n- Tumbnail : Photo by [NASA](https://unsplash.com/@nasa?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/website?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n  ","slug":"seo","date":"2022-04-20 09:00","title":"SEO","category":"Web","tags":["SEO","GoogleSearchEngine","검색어 노출","구글 검색어 노출"],"thumbnailSrc":"https://euidong.github.io/images/web.jpg"},{"content":"\n해당 포스팅은 블로그를 직접 만드는 과정에서 겪은 시행착오를 정리한 내용이다.\n\n나의 블로그 포스팅을 향한 일대기는 2019년도에서 부터 시작된다.\n\n## JSP / Servlet\n\n2019년도에 군대를 막 전역하고, 학점을 잘 챙기면서 여러가지 행사에 참여했다. 그 과정에서 기술 블로그를 제작하겠다는 꿈을 꾸고 작업에 착수한다.\n그 당시에는 JSP와 Servlet을 이용한 방법을 통해서 Posting하는 것을 시도했다.\n\ngithub : [euidong/blog](https://github.com/euidong/blog)\n\n해당 방식은 markdown file을 그대로 가져와서 rendering하여 만들었다. 하지만, jar file을 실행해야 한다. 따라서, JAVA Virtual Machine이 필요하기에 결론적으로 이를 호스팅할 machine이 필요하다. 따라서, AWS free tier를 이용해서 배포했지만, 다소 배포 관리가 귀찮고, 당시에는 frontend & backend 등 아직 개념이 제대로 스지 않았기 대문에 중간에 포스팅을 조기 종료했다.\n\n결국 JSP + Servlet을 이용한 시도는 종료된다.\n\n## Gatsby\n\n후에 2021년도 1월에 다시 새롭게 블로그를 쓰겠다는 포부를 갖고, 블로그 작성 방법을 찾는다. 당시에는 React를 이용해서 다수의 Application을 제작해본 경험이 있었기 때문에 이를 이용한 Blog를 만들려고 했다. 자세히 기억은 안나는데 Gatsby Showcase에 있는 source code를 이용해서 Blog를 제작했다. 하지만, Gatsby에 대해 아는게 없고, 시간을 쓸 여유가 없어서 결국에는 중도에 멈춘다. 추가적으로 Github action으로 CI/CD 구현을 수행하는 작업까지도 진행하였다. 하지만 결국 제대로 진행된 것 없이 종료되었다.\n\ngithub : [euidong/euidong.github.io/dev@deprecated](https://github.com/euidong/euidong.github.io/tree/dev%40deprecated)\n\n## Tistory\n\n2021년도 3월에 결국 직접 제작을 하는 것을 포기하고, Tistory를 이용해서 블로그에 포스팅을 시작한다. 해당 시기부터 시작해서 몇 개의 포스팅을 작성하였다. 대략 35개 정도의 포스팅을 작성했고, 최근에 이르러서 작성의 한계를 느끼며 갈아타야겠다고 생각했다.\n\n다음은 직접 커스텀을 해야겠다고 생각했던 이유이다.\n\n1. 호환성이 떨어진다. => Markdown으로 변환도 가능하지만, Github와 완벽한 호환이 안된다.\n2. 가끔 모바일에서 문자가 깨진다. => 아마 MAC으로 작성하는 경우 문자가 깨지는 것 같다. 근데, 이를 매번 모바일로 켜서 확인하기에는 너무 번거롭다.\n3. 커스텀을 할 때 다른 Library를 맘대로 가져와서 쓸 수 있지만, pure js, jquery 기반으로만 가능하고, 유지보수가 쉽지 않다.\n4. 가끔 작성 결과가 너무 예측 불가능하다.\n5. tag 관리가 불편하다.\n6. 기본 UI가 안이쁘다.\n\n몇 가지 이유가 더 있었던 거 같은데, 아마 이정도가 문제였던 거 같다. 암튼 내가 관리하지 못하는 것으로 인한 스트레스가 있었기 때문에 이를 해결하기 위해서 완전 커스텀을 다시 결정하였다.\n\ntistory: [justlog](https://justlog.tistory.com)\n\n## 완전 커스텀\n\n### 생 React\n\n처음에는 생 React를 통해서 Blog를 만들어야겠다고 생각했다. 가장 일반적으로 할 수 있는 작업이고, 다른 static page generating 기능을 수행하는 react framework를 다시 공부하는 workload를 지고 싶지 않았고, 굳이 필요하지 않은 의존성을 만들고 싶지 않아서 결국 생 React로 바로 작업을 시작한다.\n\n당시에는 Tistory에서 한계를 느꼈던 부분을 고치면서, Tistory에서 갖고 싶었던 장점을 가져가고자 했다.\n\n1. 호환성이 떨어지던 점은 Markdown을 이용해서 작성하고, Github viewer style(GFM, Github Flavor Markdown)을 사용하기로 한다. 따라서, 해당 블로그의 모든 글을 Github에 올려도 이미지 경로 빼고는 매우 잘 작동할 것이다. (이는 후에 이미지 호스팅 CDN을 따로 설정하면 해결됨.)\n2. Tistory에서 장점이라고 생각했던, Category로 작성글을 묶고, Tag들로 다시 한 번 더 분류한다.\n3. Posting을 보기 쉽게 정리되어있어야 한다.\n4. Dark Mode를 지원해야 한다.\n5. 조회수 관리를 위해서 Google Analytics 설정을 해야한다.\n6. 구글 / 네이버 검색에 노출되어야 한다.\n7. 광고를 게시할 수 있어야 한다.\n8. Github에 Push하는 것만으로 Posting이 게시될 수 있어야 한다. (Github Action)\n9. Category와 Tag들은 Markdown안에 작성하지만, 이를 조회할 수 있어야 한다. 따라서, code를 build할 때 json으로 generating 할 수 있는 로직을 설계한다.\n10. UI는 최대한 Simple 하고 깔끔하게 만드는 것을 목표로 하였다.\n\n따라서, 모든 Button 부터 모든 UI를 직접 제작(여타 디자인 사용 x - material, ant 등)하고, Routing 설정하고, 작업을 모두 마무리한다.\n\n여기까지는 모든 작업이 순조롭게 진행되고, 마무리가 되었다. 하지만, SEO(검색 엔진 최적화) 작업을 진행하면서, 결국 static page가 필요함을 깨닫는다. 왜냐하면, 기존의 React Router를 사용하게 되면, <https://euidong.github.io/posts/dfs1> 를 찾을 수가 없다. 왜냐하면, github에서는 page를 직접 접근할 때에는 배포 branch에서 해당 파일을 찾게 되는데 해당 파일이 없으면 결국 404 Not Found를 노출하게 된다. 이를 해결하기 위해서, dummy redirect로 root로 돌려보내줄 수도 있지만, 결코 좋은 방법은 아니다. 검색엔진 최적화에도 좋지 못하다. 따라서, static file을 각 각의 url마다 생성해주는 Static Page Generating이 필요하다고 느낀다. 따라서, Gatsby와 NextJS 중에서 선택을 하기로 한다.\n\n이제 추가된 요구사항은 다음과 같다.\n\n1. 기존 코드를 그대로 활용할 수 있어야 한다.\n2. Static Page Generating을 지원해야 한다.\n\ngithub : [euidong/euidong.github.io/dev@pure-react](https://github.com/euidong/euidong.github.io/tree/dev%40pure-react)\n\n### 다시 Gatsby\n\n다시 돌아와 Gatsby를 시도하기로 한다. 애초에 GraphQL과 React 모두 경험이 있기 때문에 쉽게 할 수 있을 거라고 생각했다. 하지만, 생각보다 GraphQL Query의 제한점이 많아서 결국 Gatsby는 포기하기로 한다. 물론 Gatsby의 확장 도구들은 유용했지만 위에서 제시한 9번을 구현하기에 한계를 느꼈다. (내 딴에는 GraphQL로 만들고 싶었는데 사실 포기하고 JSON으로 만들었으면 가능했을 듯하다.)\n\n### NextJS\n\n그래서 다음으로 시도한 것이 NextJS이다. NextJS는 생성 시에 내부 API를 정의하여 이를 기반으로 미리 compile을 완료한 html 파일들을 생성해두고, 제공하면서도, 그 내부에서는 SPA 처럼 동작할 수 있도록 돕는 방식이다. React를 이용한 Framework인 만큼 기존의 code를 그대로 사용할 수 있어서 쉽게 사용이 가능했다. 하지만, Gatsby와 마찬가지로 어느정도의 한계는 존재했기 때문에 결국은 react만 생성하던 방식처럼 JSON file을 generating하여 category와 tag들을 수집하였다.\n\n그 결과 지금과 같은 형태의 블로그를 완성하였다. 현재 포스팅을 계속해서 진행할 예정이며, 광고 및 여타 설정들도 추가로 진행할 예정이다.\n\n![blog-view](/images/blog.png)\n\ngithub : [euidong/euidong.github.io/dev](https://github.com/euidong/euidong.github.io/tree/dev)\n\n최종으로 만들어진 Blog는 다음과 같은 요구사항을 만족한다.\n\n- [x] Markdown을 통해서 작성이 가능하고, 이는 DB 즉, BackEnd를 필요로 하지 않는다.\n- [x] Category로 작성글을 묶고, Tag들로 다시 한 번 더 분류하는 것이 가능하다.\n- [x] Dark Mode를 지원한다.\n- [x] 조회수 관리를 위해서 Google Analytics를 사용한다.\n- [x] 구글 / 네이버 검색에 노출되어있다.\n- [x] 광고를 게시하였다.\n- [x] Github에 Push하는 것만으로 Posting이 게시된다. (Github Action)\n- [x] Build 시에 SEO에 필요한 sitemap을 자동 생성한다.\n- [x] Theme는 Github의 color palette에 기반하여 설정하여, 친숙하다.\n- [x] 모바일을 지원한다.\n- [x] 이미지 크기를 재설정할 수 있는 command를 포함한다.\n","slug":"making-blog","date":"2022-05-05 21:54","title":"블로그 제작기","category":"Web","tags":["frontend","react","gatsby","nextjs","github"],"thumbnailSrc":"https://euidong.github.io/images/blog.png"}],"params":{"subject":"Web"}},"__N_SSG":true}